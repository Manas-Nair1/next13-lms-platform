generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Course {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String
  title String
  description String?
  imageUrl String?
  price Float?
  isPublished Boolean @default(false)

  categoryId String? @db.Uuid  // UUID type
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([title])
}

model Category {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid  // UUID type
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String
  url String

  courseId String? @db.Uuid  // Ensuring UUID type consistency
  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title String
  description String?
  videoUrl String?
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData QuizData?
  quiztopic String
  courseId String? @db.Uuid  // Ensuring UUID type consistency
  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model QuizData {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  questions Json @db.JsonB
  chapterId String @db.Uuid @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String

  chapterId String @db.Uuid
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)
  score String @default("0")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String

  courseId String @db.Uuid
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}